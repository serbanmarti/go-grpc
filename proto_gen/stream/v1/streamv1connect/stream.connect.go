// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: stream/v1/stream.proto

package streamv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/serbanmarti/go-grpc/proto_gen/stream/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StreamServiceName is the fully-qualified name of the StreamService service.
	StreamServiceName = "stream.v1.StreamService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StreamServiceUploadFileProcedure is the fully-qualified name of the StreamService's UploadFile
	// RPC.
	StreamServiceUploadFileProcedure = "/stream.v1.StreamService/UploadFile"
	// StreamServiceDirectMessageProcedure is the fully-qualified name of the StreamService's
	// DirectMessage RPC.
	StreamServiceDirectMessageProcedure = "/stream.v1.StreamService/DirectMessage"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	streamServiceServiceDescriptor             = v1.File_stream_v1_stream_proto.Services().ByName("StreamService")
	streamServiceUploadFileMethodDescriptor    = streamServiceServiceDescriptor.Methods().ByName("UploadFile")
	streamServiceDirectMessageMethodDescriptor = streamServiceServiceDescriptor.Methods().ByName("DirectMessage")
)

// StreamServiceClient is a client for the stream.v1.StreamService service.
type StreamServiceClient interface {
	UploadFile(context.Context) *connect.ClientStreamForClient[v1.UploadFileRequest, v1.UploadFileResponse]
	DirectMessage(context.Context) *connect.BidiStreamForClient[v1.DirectMessageRequest, v1.DirectMessageResponse]
}

// NewStreamServiceClient constructs a client for the stream.v1.StreamService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStreamServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StreamServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &streamServiceClient{
		uploadFile: connect.NewClient[v1.UploadFileRequest, v1.UploadFileResponse](
			httpClient,
			baseURL+StreamServiceUploadFileProcedure,
			connect.WithSchema(streamServiceUploadFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		directMessage: connect.NewClient[v1.DirectMessageRequest, v1.DirectMessageResponse](
			httpClient,
			baseURL+StreamServiceDirectMessageProcedure,
			connect.WithSchema(streamServiceDirectMessageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// streamServiceClient implements StreamServiceClient.
type streamServiceClient struct {
	uploadFile    *connect.Client[v1.UploadFileRequest, v1.UploadFileResponse]
	directMessage *connect.Client[v1.DirectMessageRequest, v1.DirectMessageResponse]
}

// UploadFile calls stream.v1.StreamService.UploadFile.
func (c *streamServiceClient) UploadFile(ctx context.Context) *connect.ClientStreamForClient[v1.UploadFileRequest, v1.UploadFileResponse] {
	return c.uploadFile.CallClientStream(ctx)
}

// DirectMessage calls stream.v1.StreamService.DirectMessage.
func (c *streamServiceClient) DirectMessage(ctx context.Context) *connect.BidiStreamForClient[v1.DirectMessageRequest, v1.DirectMessageResponse] {
	return c.directMessage.CallBidiStream(ctx)
}

// StreamServiceHandler is an implementation of the stream.v1.StreamService service.
type StreamServiceHandler interface {
	UploadFile(context.Context, *connect.ClientStream[v1.UploadFileRequest]) (*connect.Response[v1.UploadFileResponse], error)
	DirectMessage(context.Context, *connect.BidiStream[v1.DirectMessageRequest, v1.DirectMessageResponse]) error
}

// NewStreamServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStreamServiceHandler(svc StreamServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	streamServiceUploadFileHandler := connect.NewClientStreamHandler(
		StreamServiceUploadFileProcedure,
		svc.UploadFile,
		connect.WithSchema(streamServiceUploadFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	streamServiceDirectMessageHandler := connect.NewBidiStreamHandler(
		StreamServiceDirectMessageProcedure,
		svc.DirectMessage,
		connect.WithSchema(streamServiceDirectMessageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/stream.v1.StreamService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StreamServiceUploadFileProcedure:
			streamServiceUploadFileHandler.ServeHTTP(w, r)
		case StreamServiceDirectMessageProcedure:
			streamServiceDirectMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStreamServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStreamServiceHandler struct{}

func (UnimplementedStreamServiceHandler) UploadFile(context.Context, *connect.ClientStream[v1.UploadFileRequest]) (*connect.Response[v1.UploadFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stream.v1.StreamService.UploadFile is not implemented"))
}

func (UnimplementedStreamServiceHandler) DirectMessage(context.Context, *connect.BidiStream[v1.DirectMessageRequest, v1.DirectMessageResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("stream.v1.StreamService.DirectMessage is not implemented"))
}
